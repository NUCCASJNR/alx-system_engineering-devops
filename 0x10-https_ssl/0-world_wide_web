#!/usr/bin/env bash
# Configure your domain zone so that the subdomain www points to your load-balancer IP (lb-01). Letâ€™s also add other subdomains to make our life easier, and write a Bash script that will display information about subdomains.

#Requirements:

#Add the subdomain www to your domain, point it to your lb-01 IP (your domain name might be configured with default subdomains, feel free to remove them)
#Add the subdomain lb-01 to your domain, point it to your lb-01 IP
#Add the subdomain web-01 to your domain, point it to your web-01 IP
#Add the subdomain web-02 to your domain, point it to your web-02 IP
#Your Bash script must accept 2 arguments:
#domain:
#type: string
#what: domain name to audit
#mandatory: yes
#subdomain:
#type: string
#what: specific subdomain to audit
#mandatory: no
#Output: The subdomain [SUB_DOMAIN] is a [RECORD_TYPE] record and points to [DESTINATION]
#When only the parameter domain is provided, display information for its subdomains www, lb-01, web-01 and web-02 - in this specific order
#When passing domain and subdomain parameters, display information for the specified subdomain
#Ignore shellcheck case SC2086
#Must use:
#awk
#at least one Bash function
#You do not need to handle edge cases such as:
#Empty parameters
#Nonexistent domain names
#Nonexistent subdomains
print_domain_info ()
{
	line=$(dig "$2"."$1" | grep -A1 "ANSWER SECTION" | tail -n 1)
	echo "$2 $line" | awk '{print "The subdomain " $1 " is a " $5 " record and points to " $6}'
}


if [ $# -eq 1 ]
then
  print_domain_info "$1" "www"
  print_domain_info "$1" "lb-01"
  print_domain_info "$1" "web-01"
  print_domain_info "$1" "web-02"
elif [ $# -eq 2 ]
then
  print_domain_info "$1" "$2"
fi
